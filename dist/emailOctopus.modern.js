import s from"axios";class t extends Error{constructor(s){super(s||"Your API key is invalid."),this.code="API_KEY_INVALID",this.message="Your API key is invalid.",this.message=s||"Your API key is invalid.",this.name="ApiKeyInvalidError"}}class e extends Error{constructor(s){super(s||"Generic email octopus error"),this.code="EMAIL_OCTOPUS_ERROR",this.message="Generic email octopus error",this.message=s||"Generic email octopus error",this.name="EmailOctopusError"}}class r extends Error{constructor(s){super(s||"Parameters are missing or invalid."),this.code="INVALID_PARAMETERS",this.message="Parameters are missing or invalid.",this.message=s||"Parameters are missing or invalid.",this.name="InvalidParametersError"}}class o extends Error{constructor(s){super(s||"A contact already exists with the supplied email address."),this.code="MEMBER_EXISTS_WITH_EMAIL_ADDRESS",this.message="A contact already exists with the supplied email address.",this.message=s||"A contact already exists with the supplied email address.",this.name="MemberExistsWithEmailAddressError"}}class a extends Error{constructor(s){super(s||"The requested endpoint does not exist."),this.code="NOT_FOUND",this.message="The requested endpoint does not exist.",this.message=s||"The requested endpoint does not exist.",this.name="NotFoundError"}}class i extends Error{constructor(s){super(s||"You're not authorised to perform that action."),this.code="UNAUTHORISED",this.message="You're not authorised to perform that action.",this.message=s||"You're not authorised to perform that action.",this.name="UnauthorisedError"}}function n(){return n=Object.assign?Object.assign.bind():function(s){for(var t=1;t<arguments.length;t++){var e=arguments[t];for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(s[r]=e[r])}return s},n.apply(this,arguments)}class c extends Error{constructor(s){super(s||"An unknown error has occurred."),this.code="UNKNOWN",this.message="An unknown error has occurred.",this.message=s||"An unknown error has occurred.",this.name="UnknownError"}}const d=(s,e)=>{if("INVALID_PARAMETERS"===e.code)throw new r(e.message);if("API_KEY_INVALID"===e.code)throw new t(e.message);if("UNAUTHORISED"===e.code)throw new i(e.message);if("NOT_FOUND"===e.code)throw new a(e.message);if("UNKNOWN"===e.code)throw new c(e.message)},l=t=>async r=>{try{return(await s.post(`https://emailoctopus.com/api/1.6/lists/${r.listId}/contacts`,n({api_key:t,email_address:r.emailAddress},r.fields&&{fields:r.fields},r.tags&&{tags:r.tags},r.status&&{status:r.status}))).data}catch(t){if(s.isAxiosError(t)&&t.response){var a;const s=null==(a=t.response)?void 0:a.data;if("MEMBER_EXISTS_WITH_EMAIL_ADDRESS"===s.code)throw new o;d(0,s)}throw new e}},u=t=>async r=>{try{return(await s.post("https://emailoctopus.com/api/1.6/lists",{api_key:t,name:r.name})).data}catch(t){if(s.isAxiosError(t)&&t.response){var o;const s=null==(o=t.response)?void 0:o.data;d(0,s)}throw new e}},h=t=>async(r,o)=>{let a=(null!=o&&o.autoPaginate?1:r.page)||1,i="next-initial",n=[];try{do{const e=await s.get(`https://emailoctopus.com/api/1.6/lists/${r.listId}/contacts`,{params:{api_key:t,limit:r.limit||100,page:a}});n.push(...e.data.data),null!=o&&o.autoPaginate?(a+=1,i=e.data.paging.next):i=null}while(null!==i)}catch(t){if(s.isAxiosError(t)&&t.response){var c;const s=null==(c=t.response)?void 0:c.data;d(0,s)}throw new e}return n},p=t=>async r=>{try{return(await s.get("https://emailoctopus.com/api/1.6/lists",{params:{api_key:t,limit:r.limit||100,page:r.page||1}})).data}catch(t){if(s.isAxiosError(t)&&t.response){var o;const s=null==(o=t.response)?void 0:o.data;d(0,s)}throw new e}};class m extends Error{constructor(s){super(s||"The list could not be found."),this.code="LIST_NOT_FOUND",this.message="The list could not be found.",this.message=s||"The list could not be found.",this.name="ListNotFoundError"}}const E=t=>async r=>{try{return(await s.get(`https://emailoctopus.com/api/1.6/lists/${r.listId}`,{params:{api_key:t}})).data}catch(t){if(s.isAxiosError(t)&&t.response){var o;const s=null==(o=t.response)?void 0:o.data;if("LIST_NOT_FOUND"===s.code)throw new m;d(0,s)}throw new e}};class g extends Error{constructor(s){super(s||"The contact could not be found."),this.code="MEMBER_NOT_FOUND",this.message="The contact could not be found.",this.message=s||"The contact could not be found.",this.name="MemberNotFoundError"}}const w=t=>async r=>{try{return void await s.post(`https://emailoctopus.com/api/1.6/lists/${r.listId}/contacts/${r.memberId}`,{api_key:t})}catch(t){if(s.isAxiosError(t)&&t.response){var o;const s=null==(o=t.response)?void 0:o.data;if("MEMBER_NOT_FOUND"===s.code)throw new g;d(0,s)}throw new e}},A=t=>async r=>{try{return(await s.get(`https://emailoctopus.com/api/1.6/lists/${r.listId}/contacts/${r.memberId}`,{params:{api_key:t}})).data}catch(t){if(s.isAxiosError(t)&&t.response){var o;const s=null==(o=t.response)?void 0:o.data;d(0,s)}throw new e}},f=t=>async r=>{try{return(await s.put(`https://emailoctopus.com/api/1.6/lists/${r.listId}/contacts/${r.memberId}`,n({api_key:t},r.emailAddress&&{email_address:r.emailAddress},r.fields&&{fields:r.fields},r.tags&&{tags:r.tags},r.status&&{status:r.status}))).data}catch(t){if(s.isAxiosError(t)&&t.response){var o;const s=null==(o=t.response)?void 0:o.data;if("MEMBER_NOT_FOUND"===s.code)throw new g;d(0,s)}throw new e}},_=s=>({lists:{getList:E(s),getAllLists:p(s),createList:u(s),getAllContacts:h(s),getContactOfList:A(s),createContact:l(s),deleteContact:w(s),updateContactOfList:f(s)}});export{t as ApiKeyInvalidError,e as EmailOctopusError,r as InvalidParametersError,o as MemberExistsWithEmailAddressError,a as NotFoundError,i as UnauthorisedError,_ as emailOctopus};
//# sourceMappingURL=emailOctopus.modern.js.map
